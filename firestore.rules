rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userID) {
      return isAuthenticated() && request.auth.uid == userID;
    }
    
    function validUserData() {
      let data = request.resource.data;
      return data.id == request.auth.uid
        && data.displayName is string
        && data.displayName.size() >= 1
        && data.displayName.size() <= 50
        && data.email is string
        && data.email.matches('[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}');
    }
    
    function immutableFields() {
      let data = request.resource.data;
      let existingData = resource.data;
      return data.id == existingData.id
        && data.email == existingData.email
        && data.createdAt == existingData.createdAt;
    }
    
    // Development mode - allow all authenticated users to read/write for testing
    // TODO: Remove this in production and use proper security rules below
    
    // Users collection rules
    match /users/{userID} {
      // Allow authenticated users to read any user profile (for development)
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create user profiles (for development)
      allow create: if isAuthenticated();
      
      // Allow authenticated users to update profiles (for development)
      // Special rule: Allow users to update their own FCM token
      allow update: if isAuthenticated() && (
        // General update (development mode)
        true
        ||
        // Specific FCM token update (production-ready)
        (request.auth.uid == userID 
         && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['fcmToken', 'lastTokenUpdate']))
      );
      
      // No one can delete user documents (admin only, not implemented here)
      allow delete: if false;
    }
    
    // Chats collection rules (PR #4) - Development mode
    match /chats/{chatID} {
      // Allow authenticated users to read any chat (for development)
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create chats (for development)
      allow create: if isAuthenticated();
      
      // Allow authenticated users to update chats (for development)
      allow update: if isAuthenticated();
      
      // No one can delete chats (admin only, not implemented here)
      allow delete: if false;
    }
    
    // Messages collection rules (PR #6, PR #12) - Development mode
    match /chats/{chatID}/messages/{messageID} {
      // Allow authenticated users to read any message (for development)
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create messages (for development)
      allow create: if isAuthenticated();
      
      // Allow authenticated users to update messages (for development)
      // Includes read receipt updates (readBy, readAt fields)
      allow update: if isAuthenticated();
      
      // No one can delete messages (admin only, not implemented here)
      allow delete: if false;
    }
    
    /* 
    // PRODUCTION SECURITY RULES (commented out for development)
    // Uncomment and use these rules in production:
    
    // Users collection rules
    match /users/{userID} {
      // Anyone authenticated can read any user profile
      allow read: if isAuthenticated();
      
      // Only the user can create their own profile with valid data
      allow create: if isOwner(userID) && validUserData();
      
      // Only the user can update their own profile, immutable fields must stay the same
      allow update: if isOwner(userID) && immutableFields();
      
      // No one can delete user documents (admin only, not implemented here)
      allow delete: if false;
    }
    
    // Chats collection rules (PR #4)
    match /chats/{chatID} {
      // Users can read chats they are members of
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      
      // Users can create chats they are members of
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      
      // Users can update chats they are members of
      allow update: if isAuthenticated() && request.auth.uid in resource.data.members;
      
      // No one can delete chats (admin only, not implemented here)
      allow delete: if false;
    }
    
    // Messages collection rules (PR #6, PR #12)
    match /chats/{chatID}/messages/{messageID} {
      // Users can read messages from chats they are members of
      allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatID)).data.members;
      
      // Users can create messages in chats they are members of
      allow create: if isAuthenticated() 
        && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatID)).data.members
        && request.auth.uid == resource.data.senderID;
      
      // Users can update their own messages (for status updates)
      // OR update readBy/readAt fields of any message in chats they are members of (PR #12)
      allow update: if isAuthenticated() 
        && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatID)).data.members
        && (
          // Allow updating own messages (for status updates)
          request.auth.uid == resource.data.senderID
          ||
          // Allow updating readBy and readAt fields of any message (for read receipts)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy', 'readAt', 'status']))
        );
      
      // No one can delete messages (admin only, not implemented here)
      allow delete: if false;
    }
    */
  }
}

